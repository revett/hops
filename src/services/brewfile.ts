import type { Config } from "../types/config";
import { writeFile } from "fs/promises";
import dayjs from "dayjs";
import { Result, ok, err } from "neverthrow";

export async function generateBrewfile(
  config: Config,
  machine: string
): Promise<Result<void, Error>> {
  const { brewfile, machines, metadata } = config;

  if (!machines[machine]) {
    return err(new Error(`Machine flag not found in hops.yml: ${machine}`));
  }

  if (!metadata) {
    return err(new Error("Metadata not found in config"));
  }

  const taps = new Set<string>();
  const formulae = new Set<string>();
  const casks = new Set<string>();

  for (const [mach, packages] of Object.entries(machines)) {
    if (mach !== machine && mach !== "shared") {
      continue;
    }

    packages.taps?.forEach((tap) => taps.add(tap));
    packages.formulae?.forEach((f) => formulae.add(f));
    packages.casks?.forEach((cask) => casks.add(cask));
  }

  const lines: string[] = [];

  lines.push(
    `# Generated by https://github.com/revett/hops v${metadata.version}`
  );
  lines.push(`# Config: ${metadata.path}`);
  lines.push(`# Machine: ${machine}`);
  lines.push(`# Last updated: ${dayjs().format("YYYY-MM-DD HH:mm:ss")}\n`);

  lines.push("# Taps\n");
  if (taps.size > 0) {
    [...taps].sort().forEach((tap) => lines.push(`tap "${tap}"`));
  } else {
    lines.push("# None.");
  }

  lines.push("\n# Formulae\n");
  if (formulae.size > 0) {
    [...formulae].sort().forEach((f) => lines.push(`brew "${f}"`));
  } else {
    lines.push("# None.");
  }

  lines.push("\n# Casks\n");

  if (casks.size > 0) {
    [...casks].sort().forEach((cask) => lines.push(`cask "${cask}"`));
  } else {
    lines.push("# None.");
  }

  console.log(
    `ðŸ§ª Writing ${taps.size} taps, ${formulae.size} formulae, ${casks.size} casks`
  );
  console.log(`ðŸ“„ Writing Brewfile: ${brewfile}`);

  try {
    await writeFile(brewfile, lines.join("\n"), "utf8");
    console.log(`âœ… Brewfile updated`);
  } catch (error) {
    const msg = error instanceof Error ? error.message : String(error);
    return err(new Error(`Unable to write to Brewfile at ${brewfile}: ${msg}`));
  }

  return ok(undefined);
}
