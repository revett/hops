import { writeFile } from "node:fs/promises";
import { log } from "@clack/prompts";
import dayjs from "dayjs";
import { type Result, err, ok } from "neverthrow";
import pc from "picocolors";
import type { Config } from "../types/config";

const displayItems = (
  lines: string[],
  items: Set<string>,
  title: string,
  prefix: string,
) => {
  lines.push(`\n# ${title}\n`);

  if (items.size > 0) {
    for (const i of [...items].sort()) {
      lines.push(`${prefix} "${i}"`);
    }
  } else {
    lines.push("# None.");
  }

  return lines;
};

export async function generateBrewfile(
  config: Config,
  machine: string,
  version: string,
  path: string,
): Promise<Result<void, Error>> {
  log.step(pc.bold("Generating Brewfile"));
  const { brewfile, machines } = config;

  if (!machines[machine]) {
    return err(new Error(`Machine flag not found in hops.yml: ${machine}`));
  }

  const taps = new Set<string>();
  const formulae = new Set<string>();
  const casks = new Set<string>();
  const cursor = new Set<string>();

  for (const [mach, packages] of Object.entries(machines)) {
    if (mach !== machine && mach !== "shared") {
      continue;
    }

    for (const t of packages.taps ?? []) {
      taps.add(t);
    }
    for (const f of packages.formulae ?? []) {
      formulae.add(f);
    }
    for (const c of packages.casks ?? []) {
      casks.add(c);
    }
    for (const c of packages.cursor ?? []) {
      cursor.add(c);
    }
  }

  const hasCursorInstalled = casks.has("cursor");
  if (!hasCursorInstalled && cursor.size > 0) {
    return err(
      new Error(
        "Cursor extensions defined in hops.yml but Cursor cask not installed",
      ),
    );
  }

  log.info(
    [
      `${taps.size} ${taps.size === 1 ? "tap" : "taps"}`,
      `${formulae.size} ${formulae.size === 1 ? "formula" : "formulae"}`,
      `${casks.size} ${casks.size === 1 ? "cask" : "casks"}`,
      `${cursor.size} ${cursor.size === 1 ? "cursor extension" : "cursor extensions"}`,
    ].join("\n"),
  );

  const lines: string[] = [];

  lines.push(`# Generated by https://github.com/revett/hops v${version}`);
  lines.push(`# Config: ${path}`);
  lines.push(`# Machine: ${machine}`);
  lines.push(`# Last updated: ${dayjs().format("YYYY-MM-DD HH:mm:ss")}`);

  displayItems(lines, taps, "Taps", "tap");
  displayItems(lines, formulae, "Formulae", "brew");
  displayItems(lines, casks, "Casks", "cask");
  displayItems(lines, cursor, "Cursor", "vscode");

  await writeFile(brewfile, lines.join("\n"), "utf8")
    .then(() => {
      log.success(`Wrote ${lines.length} lines to: ${brewfile}`);
    })
    .catch((error) => {
      const msg = error instanceof Error ? error.message : String(error);
      return err(
        new Error(`Unable to write to Brewfile at ${brewfile}: ${msg}`),
      );
    });

  return ok(undefined);
}
